from datetime import datetime, timedelta, timezone
from logging import Logger
from typing import Optional

import anduril.ontology.v1
from anduril.entitymanager.v1 import (
    EntityManagerApiStub,
    GetEntityRequest,
    GetEntityResponse,
    PublishEntityRequest,
    PublishEntityResponse,
    Entity,
    Aliases,
    AlternateId,
    AltIdType,
    MilView,
    Location,
    Position,
    Ontology,
    Template,
    Provenance,
    Classification,
    ClassificationInformation,
    ClassificationLevels
)
from grpclib.client import Channel

from ais import VesselData

EXPIRY_OFFSET_SECONDS = 10


class Lattice:
    def __init__(self, logger: Logger, lattice_ip: str, bearer_token: str, sandbox_token: str):
        self.logger = logger
        self.lattice_ip = lattice_ip
        self.generated_metadata = {
            "authorization": f"Bearer {bearer_token}",
            "anduril-sandbox-authorization": f"Bearer {sandbox_token}"
        }

    async def get_entity(self, entity_id) -> Optional[GetEntityResponse]:
        channel = Channel(host=self.lattice_ip, port=443, ssl=True)
        entity_manager_stub = EntityManagerApiStub(channel)
        try:
            response = await entity_manager_stub.get_entity(
                GetEntityRequest(entity_id=entity_id),
                metadata=self.generated_metadata
            )
            channel.close()
            return response
        except Exception as error:
            self.logger.error(f"lattice api get entity error {error}")
            channel.close()
            return None

    async def publish_entity(self, entity) -> Optional[PublishEntityResponse]:
        channel = Channel(host=self.lattice_ip, port=443, ssl=True)
        entity_manager_stub = EntityManagerApiStub(channel)
        try:
            response = await entity_manager_stub.publish_entity(
                PublishEntityRequest(entity=entity),
                metadata=self.generated_metadata
            )
            channel.close()
            return response
        except Exception as error:
            self.logger.error(f"lattice api publish entity error {error}")
            channel.close()
            return None

    @staticmethod
    def generate_new_entity(vessel_data: VesselData) -> Entity:
        return Entity(
            entity_id=f"{vessel_data.MMSI}",
            description="Generated by AIS Vessel Traffic Dataset",
            is_live=True,
            created_time=datetime.now(timezone.utc),
            expiry_time=datetime.now(timezone.utc) + timedelta(seconds=EXPIRY_OFFSET_SECONDS),
            aliases=Aliases(
                name=vessel_data.VesselName,
                alternate_ids=[
                    AlternateId(
                        id=str(vessel_data.MMSI),
                        type=AltIdType.MMSI_ID,
                    )
                ],
            ),
            mil_view=MilView(
                disposition=anduril.ontology.v1.Disposition.NEUTRAL,
                environment=anduril.ontology.v1.Environment.SURFACE,
            ),
            location=Location(
                position=Position(
                    latitude_degrees=vessel_data.LAT,
                    longitude_degrees=vessel_data.LON,
                ),
            ),
            ontology=Ontology(
                template=Template.TRACK,
                platform_type="Surface_Vessel",
            ),
            provenance=Provenance(
                data_type="vessel-data",
                integration_name="ais-sample-integration",
                source_update_time=datetime.now(timezone.utc),
            ),
            data_classification=Classification(
                default=ClassificationInformation(
                    level=ClassificationLevels.UNCLASSIFIED,
                )
            ),
        )
